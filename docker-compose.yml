version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD-SHELL", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - zookeeper
    networks:
      - kafka-network

  postgres:
    image: postgres:13.2-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: kafka
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - postgres-network

  producer:
    build: ./producer
    ports:
      - "8081:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - kafka-network

  consumer:
    build: ./consumer
    ports:
      - "8082:8080"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    volumes:
      - ./consumer/build/libs/consumer.jar:/app/consumer.jar
    networks:
      - kafka-network
      - postgres-network

  uiback:
    build: ./uiback
    container_name: uiback
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kafka?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
    volumes:
      - ./uiback/build/libs/uiback.jar:/app/uiback.jar
    networks:
      - postgres-network

networks:
  kafka-network:
    driver: bridge
  postgres-network:
    driver: bridge